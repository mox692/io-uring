name: Kernel Version Testing

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1

jobs:
  # Build latest kernel
  build-kernel-latest:
    runs-on: ubuntu-latest
    outputs:
      kernel-version: ${{ steps.kernel-info.outputs.version }}
    steps:
      - name: Get latest kernel version
        id: kernel-info
        run: |
          # Get the latest stable kernel version from kernel.org
          LATEST_VERSION=$(curl -s https://www.kernel.org/releases.json | jq -r '.latest_stable.version')
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "Latest kernel version: $LATEST_VERSION"
      
      - name: Cache kernel build
        id: cache-kernel
        uses: actions/cache@v4
        with:
          path: ~/kernel-build
          key: kernel-${{ steps.kernel-info.outputs.version }}-${{ runner.os }}
      
      - name: Install build dependencies
        if: steps.cache-kernel.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses-dev bison flex libssl-dev libelf-dev bc
      
      - name: Build kernel
        if: steps.cache-kernel.outputs.cache-hit != 'true'
        run: |
          mkdir -p ~/kernel-build
          cd ~/kernel-build
          
          # Download kernel source
          wget https://cdn.kernel.org/pub/linux/kernel/v${KERNEL_VERSION%%.*}.x/linux-${{ steps.kernel-info.outputs.version }}.tar.xz
          tar xf linux-${{ steps.kernel-info.outputs.version }}.tar.xz
          cd linux-${{ steps.kernel-info.outputs.version }}
          
          # Configure kernel with io_uring support
          make defconfig
          scripts/config --enable CONFIG_IO_URING
          scripts/config --enable CONFIG_EXPERT
          scripts/config --enable CONFIG_SHMEM
          scripts/config --enable CONFIG_TMPFS
          
          # Build kernel
          make -j$(nproc) bzImage
          make -j$(nproc) modules
          
          # Save kernel image
          cp arch/x86/boot/bzImage ~/kernel-build/
          cp .config ~/kernel-build/config-${{ steps.kernel-info.outputs.version }}
  
  # Test with latest kernel
  test-latest-kernel:
    needs: build-kernel-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Restore kernel cache
        uses: actions/cache@v4
        with:
          path: ~/kernel-build
          key: kernel-${{ needs.build-kernel-latest.outputs.kernel-version }}-${{ runner.os }}
      
      - name: Install QEMU
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-x86
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Create test image
        run: |
          # Create a minimal initramfs with our test binary
          mkdir -p initramfs/{bin,lib/x86_64-linux-gnu,lib64,proc,sys,dev}
          
          # Build the test binary statically
          cargo build --package io-uring-test --features io-uring-test/ci --release --target x86_64-unknown-linux-musl
          cp target/x86_64-unknown-linux-musl/release/io-uring-test initramfs/bin/
          
          # Create init script
          cat > initramfs/init << 'EOF'
          #!/bin/sh
          /bin/io-uring-test
          poweroff -f
          EOF
          chmod +x initramfs/init
          
          # Create initramfs
          cd initramfs
          find . | cpio -o -H newc | gzip > ../initramfs.cpio.gz
          cd ..
      
      - name: Run tests in QEMU
        run: |
          timeout 300 qemu-system-x86_64 \
            -kernel ~/kernel-build/bzImage \
            -initrd initramfs.cpio.gz \
            -append "console=ttyS0 panic=1" \
            -nographic \
            -m 2G \
            -enable-kvm \
            -cpu host || true
  